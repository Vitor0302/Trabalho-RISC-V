$date
	Fri Aug 15 15:09:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench_pipeline $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 1 # w_branch_taken $end
$var wire 1 $ w_pc_stall $end
$var wire 32 % w_pc_plus_4 [31:0] $end
$var wire 32 & w_pc_next [31:0] $end
$var wire 32 ' w_instruction [31:0] $end
$var wire 1 ( w_if_id_stall $end
$var wire 1 ) w_id_ex_bubble $end
$var wire 32 * w_branch_target_addr [31:0] $end
$var wire 32 + WB_write_data_to_regfile [31:0] $end
$var wire 32 , MEM_mem_read_data [31:0] $end
$var wire 5 - ID_rs2 [4:0] $end
$var wire 5 . ID_rs1 [4:0] $end
$var wire 32 / ID_read_data_2 [31:0] $end
$var wire 32 0 ID_read_data_1 [31:0] $end
$var wire 5 1 ID_rd [4:0] $end
$var wire 7 2 ID_opcode [6:0] $end
$var wire 32 3 ID_immediate_extended [31:0] $end
$var wire 7 4 ID_funct7 [6:0] $end
$var wire 3 5 ID_funct3 [2:0] $end
$var wire 1 6 ID_RegWrite $end
$var wire 1 7 ID_MemWrite $end
$var wire 1 8 ID_MemToReg $end
$var wire 1 9 ID_MemRead $end
$var wire 1 : ID_Branch $end
$var wire 1 ; ID_ALUSrc $end
$var wire 2 < ID_ALUOp [1:0] $end
$var wire 1 = EX_alu_zero_flag $end
$var wire 32 > EX_alu_result [31:0] $end
$var wire 32 ? EX_alu_input_2_forwarded [31:0] $end
$var wire 32 @ EX_alu_input_2_final [31:0] $end
$var wire 32 A EX_alu_input_1 [31:0] $end
$var wire 2 B EX_ForwardB [1:0] $end
$var wire 2 C EX_ForwardA [1:0] $end
$var wire 4 D EX_Final_ALU_Control [3:0] $end
$var reg 1 E EX_MEM_Branch $end
$var reg 1 F EX_MEM_MemRead $end
$var reg 1 G EX_MEM_MemToReg $end
$var reg 1 H EX_MEM_MemWrite $end
$var reg 1 I EX_MEM_RegWrite $end
$var reg 32 J EX_MEM_alu_result [31:0] $end
$var reg 5 K EX_MEM_rd [4:0] $end
$var reg 32 L EX_MEM_write_data_mem [31:0] $end
$var reg 1 M EX_MEM_zero_flag $end
$var reg 2 N ID_EX_ALUOp [1:0] $end
$var reg 1 O ID_EX_ALUSrc $end
$var reg 1 P ID_EX_Branch $end
$var reg 1 Q ID_EX_MemRead $end
$var reg 1 R ID_EX_MemToReg $end
$var reg 1 S ID_EX_MemWrite $end
$var reg 1 T ID_EX_RegWrite $end
$var reg 3 U ID_EX_funct3 [2:0] $end
$var reg 7 V ID_EX_funct7 [6:0] $end
$var reg 32 W ID_EX_immediate [31:0] $end
$var reg 32 X ID_EX_pc [31:0] $end
$var reg 5 Y ID_EX_rd [4:0] $end
$var reg 32 Z ID_EX_read_data_1 [31:0] $end
$var reg 32 [ ID_EX_read_data_2 [31:0] $end
$var reg 5 \ ID_EX_rs1 [4:0] $end
$var reg 5 ] ID_EX_rs2 [4:0] $end
$var reg 32 ^ IF_ID_instruction [31:0] $end
$var reg 32 _ IF_ID_pc [31:0] $end
$var reg 32 ` IF_ID_pc_plus_4 [31:0] $end
$var reg 1 a MEM_WB_MemToReg $end
$var reg 1 b MEM_WB_RegWrite $end
$var reg 32 c MEM_WB_alu_result [31:0] $end
$var reg 32 d MEM_WB_mem_read_data [31:0] $end
$var reg 5 e MEM_WB_rd [4:0] $end
$var reg 32 f w_pc_current [31:0] $end
$scope module u_alu $end
$var wire 32 g in1 [31:0] $end
$var wire 32 h in2 [31:0] $end
$var wire 4 i ula_control [3:0] $end
$var reg 32 j ula_result [31:0] $end
$var reg 1 = zero_flag $end
$upscope $end
$scope module u_alu_control $end
$var wire 2 k ALUOp [1:0] $end
$var wire 3 l funct3 [2:0] $end
$var wire 7 m funct7 [6:0] $end
$var parameter 4 n ALU_ADD $end
$var parameter 4 o ALU_AND $end
$var parameter 4 p ALU_OR $end
$var parameter 4 q ALU_SRL $end
$var parameter 4 r ALU_SUB $end
$var reg 4 s alu_control_out [3:0] $end
$upscope $end
$scope module u_dmem $end
$var wire 1 F MemRead $end
$var wire 1 H MemWrite $end
$var wire 32 t address [31:0] $end
$var wire 1 ! clock $end
$var wire 32 u read_data [31:0] $end
$var wire 32 v write_data [31:0] $end
$var integer 32 w i [31:0] $end
$upscope $end
$scope module u_forwarding $end
$var wire 1 I EX_MEM_RegWrite $end
$var wire 5 x EX_MEM_rd [4:0] $end
$var wire 5 y ID_EX_rs1 [4:0] $end
$var wire 5 z ID_EX_rs2 [4:0] $end
$var wire 1 b MEM_WB_RegWrite $end
$var wire 5 { MEM_WB_rd [4:0] $end
$var reg 2 | ForwardA [1:0] $end
$var reg 2 } ForwardB [1:0] $end
$upscope $end
$scope module u_hazard_detection $end
$var wire 1 Q ID_EX_MemRead $end
$var wire 5 ~ ID_EX_rd [4:0] $end
$var wire 5 !" IF_ID_rs1 [4:0] $end
$var wire 5 "" IF_ID_rs2 [4:0] $end
$var reg 1 ) ID_EX_Bubble $end
$var reg 1 ( IF_ID_Stall $end
$var reg 1 $ PC_Stall $end
$upscope $end
$scope module u_imem $end
$var wire 32 #" address [31:0] $end
$var wire 32 $" instruction [31:0] $end
$upscope $end
$scope module u_main_control $end
$var wire 7 %" opcode [6:0] $end
$var reg 2 &" ALUOp [1:0] $end
$var reg 1 ; ALUSrc $end
$var reg 1 : Branch $end
$var reg 1 9 MemRead $end
$var reg 1 8 MemToReg $end
$var reg 1 7 MemWrite $end
$var reg 1 6 RegWrite $end
$upscope $end
$scope module u_regfile $end
$var wire 1 ! clock $end
$var wire 5 '" read_reg_num1 [4:0] $end
$var wire 5 (" read_reg_num2 [4:0] $end
$var wire 1 b regwrite $end
$var wire 1 " reset $end
$var wire 32 )" write_data [31:0] $end
$var wire 5 *" write_reg [4:0] $end
$var wire 32 +" read_data2 [31:0] $end
$var wire 32 ," read_data1 [31:0] $end
$var integer 32 -" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 r
b101 q
b1 p
b0 o
b10 n
$end
#0
$dumpvars
b100000 -"
b0 ,"
b0 +"
b0 *"
bx )"
b0 ("
b0 '"
b11 &"
b10011 %"
b1010100000011 $"
b0 #"
b0 ""
b0 !"
bx ~
b0 }
b0 |
b0 {
bx z
bx y
b0 x
b10000000000 w
bx v
bx u
bx t
b10 s
bx m
bx l
b0 k
bx j
b10 i
bx h
bx g
b0 f
b0 e
bx d
bx c
0b
0a
b0 `
b0 _
b10011 ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
0T
0S
0R
0Q
0P
0O
b0 N
xM
bx L
b0 K
bx J
0I
0H
0G
0F
0E
b10 D
b0 C
b0 B
bx A
bx @
bx ?
bx >
0=
b11 <
1;
0:
09
08
07
16
b0 5
b0 4
b0 3
b10011 2
b0 1
b0 0
b0 /
b0 .
b0 -
bx ,
bx +
bx *
0)
0(
b1010100000011 '
b100 &
b100 %
0$
0#
1"
0!
$end
#10000
b100000 -"
1!
#15000
0"
#20000
0!
#30000
19
18
b0 <
b0 &"
1;
16
1=
b0 >
b0 j
b1000 &
b10000000001010110000011 '
b10000000001010110000011 $"
b11 2
b11 %"
b1010 1
b1 5
b0 @
b0 h
b0 D
b0 i
b0 s
b0 ?
b0 A
b0 g
b1000 %
b100 f
b100 #"
b100 `
b1010100000011 ^
b11 N
b11 k
1O
1T
b0 V
b0 m
b0 U
b0 l
b0 Y
b0 ~
b0 ]
b0 z
b0 \
b0 y
b0 *
b0 W
b0 [
b0 Z
b0 X
0M
bx K
bx x
1!
#40000
0!
#50000
b100 3
b100 /
b100 +"
b1010 ,
b1010 u
b10 D
b10 i
b10 s
b100 -
b100 ""
b100 ("
b1011 1
b1100 &
b1000000101101010000011000110011 '
b1000000101101010000011000110011 $"
bx e
bx {
bx *"
1I
1M
b0 K
b0 x
b0 L
b0 v
b0 J
b0 t
b0 N
b0 k
1Q
1R
b1 U
b1 l
b1010 Y
b1010 ~
b100 _
b1000 `
b10000000001010110000011 ^
b1100 %
b1000 f
b1000 #"
1!
#60000
0!
#70000
b10000001011 3
b10 <
b10 &"
09
08
0;
16
b1010 0
b1010 ,"
1)
1(
1$
b1011 /
b1011 +"
0=
b100 >
b100 j
b10000 &
b101101010110011010110011 '
b101101010110011010110011 $"
b110011 2
b110011 %"
b1010 .
b1010 !"
b1010 '"
b1011 -
b1011 ""
b1011 ("
b1100 1
b100000 4
b0 5
b100 @
b100 h
b100 ?
b0 +
b0 )"
b10000 %
b1100 f
b1100 #"
b1000 _
b1100 `
b1000000101101010000011000110011 ^
b1011 Y
b1011 ~
b100 ]
b100 z
b100 W
b100 [
b1000 *
b100 X
1F
1G
b1010 K
b1010 x
1b
b0 e
b0 {
b0 *"
b0 c
b1010 d
1!
#80000
0!
#90000
b1010 +
b1010 )"
b11 ,
b11 u
0)
0(
0$
1a
b1010 e
b1010 {
b1010 *"
0M
b1011 K
b1011 x
b100 L
b100 v
b100 J
b100 t
0Q
0R
0O
0T
1!
#100000
0!
#110000
b1011 3
0=
b11 @
b11 h
b111 >
b111 j
b10100 &
b100001010111011100010011 '
b100001010111011100010011 $"
b1101 1
b0 4
b110 5
b100 D
b100 i
b100 s
b11 ?
b1010 A
b1010 g
b10 B
b10 }
b11 +
b11 )"
b10100 %
b10000 f
b10000 #"
b1100 _
b10000 `
b101101010110011010110011 ^
b10 N
b10 k
1T
b100000 V
b100000 m
b0 U
b0 l
b1100 Y
b1100 ~
b1011 ]
b1011 z
b1010 \
b1010 y
b10000001011 W
b1011 [
b1010 Z
b10000010011 *
b1000 X
0F
0G
0I
b1011 e
b1011 {
b1011 *"
b100 c
b11 d
1!
#120000
0!
#130000
b1011 @
b1011 h
b1000 3
b1011 ?
b1011 >
b1011 j
1;
b11 <
b11 &"
16
b100 +
b100 )"
b0 B
b0 }
b1 D
b1 i
b1 s
b10011 2
b10011 %"
b1000 -
b1000 ""
b1000 ("
b1110 1
b111 5
b11000 &
b101010101011110110011 '
b101010101011110110011 $"
b1000 /
b1000 +"
0a
0b
1I
b1100 K
b1100 x
b11 L
b11 v
b111 J
b111 t
b0 V
b0 m
b110 U
b110 l
b1101 Y
b1101 ~
b1011 W
b10111 *
b1100 X
b10000 _
b10100 `
b100001010111011100010011 ^
b11000 %
b10100 f
b10100 #"
1!
#140000
0!
#150000
b1 3
b10 <
b10 &"
0;
16
b1 /
b1 +"
b1000 >
b1000 j
b11100 &
b101001110000001001100011 '
b101001110000001001100011 $"
b110011 2
b110011 %"
b1 -
b1 ""
b1 ("
b1111 1
b101 5
b1000 @
b1000 h
b0 D
b0 i
b0 s
b1000 ?
b0 ,
b0 u
b111 +
b111 )"
b11100 %
b11000 f
b11000 #"
b10100 _
b11000 `
b101010101011110110011 ^
b11 N
b11 k
1O
b111 U
b111 l
b1110 Y
b1110 ~
b1000 ]
b1000 z
b1000 W
b1000 [
b11000 *
b10000 X
b1101 K
b1101 x
b1011 L
b1011 v
b1011 J
b1011 t
1b
b1100 e
b1100 {
b1100 *"
b111 c
1!
#160000
0!
#170000
b100 3
b101 >
b101 j
1:
x8
b1 <
b1 &"
06
b1110 0
b1110 ,"
b1010 /
b1010 +"
b1011 +
b1011 )"
b101 D
b101 i
b101 s
b1 @
b1 h
b1 ?
b1100011 2
b1100011 %"
b1110 .
b1110 !"
b1110 '"
b1010 -
b1010 ""
b1010 ("
b100 1
b0 5
b100000 &
b110000000010010000100011 '
b110000000010010000100011 $"
b1101 e
b1101 {
b1101 *"
b1011 c
b0 d
b1110 K
b1110 x
b1000 L
b1000 v
b1000 J
b1000 t
b10 N
b10 k
0O
b101 U
b101 l
b1111 Y
b1111 ~
b1 ]
b1 z
b1 W
b1 [
b10101 *
b10100 X
b11000 _
b11100 `
b101001110000001001100011 ^
b100000 %
b11100 f
b11100 #"
1!
#180000
0!
#190000
b1000 3
17
1;
b0 <
b0 &"
0:
x8
b0 0
b0 ,"
b111 /
b111 +"
b1010 @
b1010 h
b11111111111111111111111111111110 >
b11111111111111111111111111111110 j
b100100 &
b1100011 '
b1100011 $"
b100011 2
b100011 %"
b0 .
b0 !"
b0 '"
b1100 -
b1100 ""
b1100 ("
b1000 1
b10 5
b100 D
b100 i
b100 s
b1010 ?
b1000 A
b1000 g
b11 ,
b11 u
b10 C
b10 |
b1000 +
b1000 )"
b100100 %
b100000 f
b100000 #"
b11100 _
b100000 `
b110000000010010000100011 ^
b1 N
b1 k
1P
xR
0T
b0 U
b0 l
b100 Y
b100 ~
b1010 ]
b1010 z
b1110 \
b1110 y
b100 W
b1010 [
b1110 Z
b11100 *
b11000 X
b1111 K
b1111 x
b1 L
b1 v
b101 J
b101 t
b1110 e
b1110 {
b1110 *"
b1000 c
1!
#200000
0!
#210000
b1000 >
b1000 j
b0 A
b0 g
1:
b1 <
b1 &"
07
x8
0;
b0 /
b0 +"
b0 3
b101 +
b101 )"
b0 ,
b0 u
b1000 @
b1000 h
b10 D
b10 i
b10 s
b0 C
b0 |
b111 ?
b1100011 2
b1100011 %"
b0 -
b0 ""
b0 ("
b0 1
b0 5
b101000 &
bx '
bx $"
b1111 e
b1111 {
b1111 *"
b101 c
b11 d
1E
xG
0I
b100 K
b100 x
b1010 L
b1010 v
b11111111111111111111111111111110 J
b11111111111111111111111111111110 t
b0 N
b0 k
0P
1S
1O
b10 U
b10 l
b1000 Y
b1000 ~
b1100 ]
b1100 z
b0 \
b0 y
b1000 W
b111 [
b0 Z
b100100 *
b11100 X
b100000 _
b100100 `
b1100011 ^
b101000 %
b100100 f
b100100 #"
1!
#220000
0!
#230000
bx 3
bx <
bx &"
0:
08
bx 0
bx ,"
bx /
bx +"
1=
b0 >
b0 j
b101100 &
bx 2
bx %"
bx .
bx !"
bx '"
bx -
bx ""
bx ("
bx 1
bx 4
bx 5
b100 D
b100 i
b100 s
b0 @
b0 h
b0 ?
bx0 +
bx0 )"
b101100 %
b101000 f
b101000 #"
b100100 _
b101000 `
bx ^
b1 N
b1 k
1P
0S
0O
b0 U
b0 l
b0 Y
b0 ~
b0 ]
b0 z
b0 W
b0 [
b100000 *
b100000 X
0E
1H
b1000 K
b1000 x
b111 L
b111 v
b1000 J
b1000 t
xa
0b
b100 e
b100 {
b100 *"
b11111111111111111111111111111110 c
b0 d
1!
#240000
0!
#250000
bx @
bx h
0=
bx >
bx j
b0x000 +
b0x000 )"
1#
bx D
bx i
bx s
bx ?
bx A
bx g
bx &
b1010 ,
b1010 u
b1000 e
b1000 {
b1000 *"
b1000 c
1E
0H
1M
b0 K
b0 x
b0 L
b0 v
b0 J
b0 t
bx N
bx k
0P
0R
bx V
bx m
bx U
bx l
bx Y
bx ~
bx ]
bx z
bx \
bx y
bx W
bx [
bx Z
bx *
b100100 X
b101000 _
b101100 `
b110000 %
b101100 f
b101100 #"
1!
#260000
0!
#270000
b11 <
b11 &"
1;
16
b0 0
b0 ,"
b0 /
b0 +"
b0 3
b10011 2
b10011 %"
b0 .
b0 !"
b0 '"
b0 -
b0 ""
b0 ("
b0 1
b0 4
b0 5
b10 D
b10 i
b10 s
0#
bx ,
bx u
b0x0x0 +
b0x0x0 )"
bx %
bx f
bx #"
b101100 _
b110000 `
b10011 ^
b0 N
b0 k
0E
0G
0M
bx K
bx x
bx L
bx v
bx J
bx t
b0 e
b0 {
b0 *"
b0 c
b1010 d
1!
#280000
0!
#290000
1=
b0 >
b0 j
bx 3
bx <
bx &"
0;
06
bx 0
bx ,"
bx /
bx +"
bx +
bx )"
b0 @
b0 h
b0 D
b0 i
b0 s
b0 ?
b0 A
b0 g
bx 2
bx %"
bx .
bx !"
bx '"
bx -
bx ""
bx ("
bx 1
bx 4
bx 5
0a
bx e
bx {
bx *"
bx c
bx d
b11 N
b11 k
1O
1T
b0 V
b0 m
b0 U
b0 l
b0 Y
b0 ~
b0 ]
b0 z
b0 \
b0 y
b101100 *
b0 W
b0 [
b0 Z
b101100 X
bx _
bx `
bx ^
1!
#295000
